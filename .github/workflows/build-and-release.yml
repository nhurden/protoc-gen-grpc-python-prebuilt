name: Build and Release protoc-gen-grpc-python

on:
  push:
    branches: [main, test]
    tags:
      - "v*"
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      grpc_version:
        description: "Specific gRPC version to build (e.g., v1.71.0)"
        required: false
        type: string
      force_release:
        description: "Force create release even if it exists"
        required: false
        type: boolean
        default: false

jobs:
  lint:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Ruff
        uses: astral-sh/ruff-action@v3

  prepare:
    runs-on: ubuntu-24.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      should_release: ${{ steps.check-release.outputs.should_release }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install yq
        uses: mikefarah/yq@v4.44.6

      - name: Generate build matrix
        id: set-matrix
        run: |
          if [ -n "${{ github.event.inputs.grpc_version }}" ]; then
            # Manual trigger with specific version
            echo "Building specific version: ${{ github.event.inputs.grpc_version }}"
            matrix=$(cat grpc-versions.yaml | yq eval '.platforms[] as $platform | .versions[] | select(.version == "${{ github.event.inputs.grpc_version }}") | {"grpc_version": .version, "grpc_tag": .tag, "platform": $platform.name, "os": $platform.os, "bazel_config": $platform.bazel_config, "artifact_name": $platform.artifact_name}' -o json | jq -s '{"include": .}')
          else
            # Build all active versions
            matrix=$(cat grpc-versions.yaml | yq eval '.platforms[] as $platform | .versions[] | select(.active == true) | {"grpc_version": .version, "grpc_tag": .tag, "platform": $platform.name, "os": $platform.os, "bazel_config": $platform.bazel_config, "artifact_name": $platform.artifact_name}' -o json | jq -s '{"include": .}')
          fi
          # Use multiline output to properly handle JSON
          {
            echo "matrix<<EOF"
            echo "$matrix"
            echo "EOF"
          } >> $GITHUB_OUTPUT
          echo "Generated matrix:"
          echo "$matrix" | jq .

      - name: Check if should create release
        id: check-release
        run: |
          should_release="false"
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/* ]]; then
            should_release="true"
          elif [[ "${{ github.event.inputs.force_release }}" == "true" ]]; then
            should_release="true"
          fi
          echo "should_release=$should_release" >> $GITHUB_OUTPUT
          echo "Should create release: $should_release"

  build:
    needs: prepare
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bazel
        uses: bazel-contrib/setup-bazel@0.15.0
        with:
          bazelisk-version: 1.26.0
          bazelisk-cache: true
          disk-cache: ${{ github.workflow }}-${{ matrix.platform }}
          repository-cache: true
          bazelrc: |
            build --color=yes
            build --curses=no
            build --show_timestamps

      - name: Checkout gRPC repository
        uses: actions/checkout@v4
        with:
          repository: grpc/grpc
          ref: ${{ matrix.grpc_tag }}
          path: grpc-source
          submodules: recursive

      - name: Cache Bazel build outputs
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/bazel
            ~/Library/Caches/bazel
          key: bazel-${{ matrix.os }}-${{ matrix.grpc_version }}-${{ hashFiles('grpc-source/WORKSPACE', 'grpc-source/MODULE.bazel', 'grpc-source/**/*.bzl') }}
          restore-keys: |
            bazel-${{ matrix.os }}-${{ matrix.grpc_version }}-
            bazel-${{ matrix.os }}-

      - name: Build protoc-gen-grpc-python
        working-directory: grpc-source
        run: |
          bazel build ${{ matrix.bazel_config }} //src/compiler:grpc_python_plugin

      - name: Copy and rename binary (Unix)
        if: runner.os != 'Windows'
        working-directory: grpc-source
        run: |
          mkdir -p ../artifacts
          if [[ "${{ runner.os }}" == "macOS" ]]; then
            find bazel-bin -name "grpc_python_plugin" -type f -perm +111 | head -1 | xargs -I {} cp {} ../artifacts/${{ matrix.artifact_name }}
          else
            cp bazel-bin/src/compiler/grpc_python_plugin ../artifacts/${{ matrix.artifact_name }}
          fi
          chmod +x ../artifacts/${{ matrix.artifact_name }}

      - name: Install protoc (for testing)
        uses: arduino/setup-protoc@v3
        with:
          version: "31.1"
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Python (for testing)
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Test plugin functionality
        run: |
          ./test/test-plugin.sh artifacts/${{ matrix.artifact_name }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}-${{ matrix.grpc_version }}
          path: artifacts/${{ matrix.artifact_name }}
          retention-days: 30

  get-versions:
    if: needs.prepare.outputs.should_release == 'true'
    needs: [prepare]
    runs-on: ubuntu-24.04
    outputs:
      versions: ${{ steps.extract-versions.outputs.versions }}
    steps:
      - name: Extract unique versions
        id: extract-versions
        run: |
          # Extract unique gRPC versions from the matrix
          versions=$(echo '${{ needs.prepare.outputs.matrix }}' | jq -r '.include[].grpc_version' | sort -u | jq -R . | jq -s .)
          echo "versions=$versions" >> $GITHUB_OUTPUT
          echo "Extracted versions: $versions"

  release:
    if: needs.prepare.outputs.should_release == 'true'
    needs: [prepare, build, get-versions]
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    strategy:
      matrix:
        grpc_version: ${{ fromJson(needs.get-versions.outputs.versions) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts for version
        uses: actions/download-artifact@v4
        with:
          pattern: "*-${{ matrix.grpc_version }}"
          merge-multiple: true
          path: release-artifacts

      - name: List artifacts
        run: |
          echo "Release artifacts:"
          ls -la release-artifacts/

      - name: Create checksums
        working-directory: release-artifacts
        run: |
          for file in *; do
            if [[ -f "$file" ]]; then
              sha256sum "$file" >> checksums-${{ matrix.grpc_version }}.txt
            fi
          done
          echo "Checksums:"
          cat checksums-${{ matrix.grpc_version }}.txt

      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ matrix.grpc_version }}
          name: gRPC Python Plugin ${{ matrix.grpc_version }}
          artifacts: "release-artifacts/*"
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          draft: false
          prerelease: false
          body: |
            # protoc-gen-grpc-python ${{ matrix.grpc_version }}

            Prebuilt binaries of the gRPC Python plugin compiled from [gRPC ${{ matrix.grpc_version }}](https://github.com/grpc/grpc/releases/tag/${{ matrix.grpc_version }}).

            ## Usage

            1. Download the appropriate binary for your platform
            2. Make it executable (Unix/macOS): `chmod +x protoc-gen-grpc-python-*`
            3. Use with protoc:
               ```bash
               protoc --plugin=protoc-gen-grpc-python=/path/to/binary \
                      --grpc-python_out=. \
                      your_service.proto
               ```

            ## Files

            - **protoc-gen-grpc-python-linux-x86_64**: Linux x86_64
            - **protoc-gen-grpc-python-macos-x86_64**: macOS Intel
            - **protoc-gen-grpc-python-macos-arm64**: macOS Apple Silicon
            - **checksums-${{ matrix.grpc_version }}.txt**: SHA256 checksums

            ## Verification

            Verify the downloaded binary using SHA256:
            ```bash
            sha256sum -c checksums-${{ matrix.grpc_version }}.txt
            ```
